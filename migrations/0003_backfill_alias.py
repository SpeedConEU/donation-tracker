# -*- coding: utf-8 -*-
# Generated by Django 1.11.9 on 2018-01-19 03:35
from __future__ import unicode_literals

import random
import sys

from django.db import migrations

def fill_in_alias(Donor, donor):
    while not donor.alias_no:
        donor.alias_no = random.randint(1000, 9999)
        other = Donor.objects.filter(alias=donor.alias, alias_no=donor.alias_no).last()
        if other and other != donor:
            donor.alias_no = None

def null_to_blank(apps, schema_editor):
    Donation = apps.get_model('tracker', 'Donation')
    db_alias = schema_editor.connection.alias
    print 'Checking null requested aliases...'
    count = Donation.objects.using(db_alias).filter(requestedalias=None).update(requestedalias='')
    if count:
        print '%d null to blank' % count


def strip_whitespace(apps, schema_editor):
    Donation = apps.get_model('tracker', 'Donation')
    db_alias = schema_editor.connection.alias
    print 'Stripping excess whitespace...'
    count = 0
    donations = Donation.objects.using(db_alias).exclude(requestedalias='')
    for i,donation in enumerate(donations):
        print '%6d/%6d\r' % (i, len(donations)),
        sys.stdout.flush()
        stripped = donation.requestedalias.strip()
        if stripped != donation.requestedalias:
            donation.requestedalias = stripped
            donation.save()
            count += 1
    if count:
        print 'Stripped %d requested alias(es)' % count

def reapply_alias(apps, schema_editor):
    Donation = apps.get_model('tracker', 'Donation')
    Donor = apps.get_model('tracker', 'Donor')
    db_alias = schema_editor.connection.alias
    print 'Reapplying requested aliases...'
    count = 0
    donations = Donation.objects.using(db_alias).filter(transactionstate='COMPLETED') \
                    .exclude(requestedalias='').select_related('donor')
    for i, donation in enumerate(donations):
        print '%6d/%6d\r' % (i, len(donations)),
        sys.stdout.flush()
        if donation.requestedalias != donation.donor.alias:
            donation.donor.alias = donation.requestedalias
            donation.donor.alias_no = None
            fill_in_alias(Donor, donation.donor)
            donation.donor.verified_alias = False
            donation.donor.save()
            count += 1


def fill_in_missing_no(apps, schema_editor):
    Donor = apps.get_model('tracker', 'Donor')
    db_alias = schema_editor.connection.alias
    print 'Filling in missing numbers...'
    count = 0
    donors = Donor.objects.using(db_alias).exclude(alias=None).filter(alias_no=None)
    print donors.first()
    for i, donor in enumerate(donors):
        print '%6d/%6d\r' % (i, len(donors)),
        sys.stdout.flush()
        fill_in_alias(Donor, donor)
        donor.save()
        count += 1
    if count:
        print 'Backfilled %d alias(es)' % count


def no_op(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('tracker', '0002_add_alias_no'),
    ]

    operations = [
        migrations.RunPython(null_to_blank),
        migrations.RunPython(strip_whitespace),
        migrations.RunPython(reapply_alias),
        migrations.RunPython(fill_in_missing_no),
    ]
